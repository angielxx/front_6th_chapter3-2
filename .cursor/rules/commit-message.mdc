---
alwaysApply: true
---

# Cursor AI Rules - TDD 커밋 메시지 컨벤션

## 커밋 메시지 작성 규칙

### 기본 형식

```
[레벨-기능-범위-단계] 간단한 설명

상세 내용 (선택사항)
- 구현/테스트 내용
- 현재 상태
- 다음 단계
```

### 레벨 (Level)

- **통합**: 여러 컴포넌트가 협력하는 통합 테스트
- **단위**: 개별 함수/클래스의 단위 테스트
- **E2E**: 전체 사용자 워크플로우 종단간 테스트

### 기능 (Feature)

- **반복생성**: 반복 일정 생성 기능
- **반복수정**: 반복 일정 수정 기능
- **반복삭제**: 반복 일정 삭제 기능
- **일정관리**: 일반 일정 CRUD 기능
- **캘린더뷰**: 캘린더 표시 기능
- **검색**: 검색 및 필터링 기능
- **알림**: 알림 기능

### 범위 (Scope)

- **매일**: 매일 반복 관련
- **매주**: 매주 반복 관련
- **매월**: 매월 반복 관련
- **매년**: 매년 반복 관련
- **전체**: 모든 반복 유형
- **UI**: 사용자 인터페이스
- **로직**: 비즈니스 로직
- **API**: API 통신

### 단계 (Phase)

- **RED**: 실패하는 테스트 작성
- **GREEN**: 테스트를 통과하는 최소 구현
- **REFACTOR**: 코드 개선 및 리팩토링

## 커밋 메시지 예시

### TDD 사이클 예시

```bash
# RED 단계
[통합-반복생성-매일-RED] 매일 반복 일정 생성 워크플로우 실패 테스트

매일 반복 일정 통합 시나리오:
- saveSchedule에 RepeatInfo 지원 확인
- 이벤트 리스트에 반복 정보 표시
- 위클리뷰/먼슬리뷰에서 매일 단위 반복 확인

현재 상태: RepeatInfo 처리 로직 미구현으로 전체 실패
다음 단계: saveSchedule 함수 반복 파라미터 지원 추가

# GREEN 단계
[통합-반복생성-매일-GREEN] saveSchedule 반복 지원 및 기본 UI 구현

테스트 통과를 위한 최소 구현:
- saveSchedule에 RepeatInfo optional 파라미터 추가
- 반복 체크박스, 선택박스, 입력 필드 구현
- 하드코딩된 반복 일정 생성 (테스트 데이터)

현재 한계: 실제 반복 로직 없이 하드코딩된 데이터

# REFACTOR 단계
[통합-반복생성-매일-REFACTOR] RecurrenceEngine 도입한 매일 반복 로직 구현

하드코딩을 실제 비즈니스 로직으로 교체:
- RecurrenceEngine 클래스 도입
- generateDailyRecurrence 메서드 구현
- 동적 날짜 계산으로 유연한 반복 생성
- 캘린더 뷰별 필터링 로직 추가
```

### 다양한 기능별 예시

```bash
# 단위 테스트
[단위-반복로직-매월-RED] 31일 매월 반복 계산 로직 실패 테스트
[단위-반복로직-매월-GREEN] 31일 매월 반복 엣지케이스 처리 구현
[단위-반복로직-매월-REFACTOR] 날짜 계산 알고리즘 성능 최적화

# UI 컴포넌트
[단위-캘린더뷰-UI-RED] 반복 아이콘 표시 컴포넌트 테스트
[단위-캘린더뷰-UI-GREEN] 반복 아이콘 기본 렌더링 구현
[단위-캘린더뷰-UI-REFACTOR] 접근성 및 스타일링 개선

# API 연동
[통합-반복생성-API-RED] 반복 일정 서버 저장 통합 테스트
[통합-반복생성-API-GREEN] 반복 일정 API 엔드포인트 연동
[통합-반복생성-API-REFACTOR] 에러 처리 및 재시도 로직 추가

# E2E 테스트
[E2E-반복관리-전체-RED] 반복 일정 전체 사용자 시나리오 실패 테스트
[E2E-반복관리-전체-GREEN] 사용자 시나리오 기본 구현
[E2E-반복관리-전체-REFACTOR] 사용자 경험 최적화
```

## 길이 제한 및 가이드라인

### 제목 줄 (50자 이내)

```bash
✅ [통합-반복생성-매일-RED] 매일 반복 생성 워크플로우 테스트 (47자)
❌ [통합-반복생성-매일-RED] 매일 반복 일정을 생성하고 캘린더 뷰에 표시하는 워크플로우 테스트 작성 (59자)
```

### 본문 (72자로 줄바꿈)

- 각 라인은 72자를 넘지 않도록 작성
- 구현 내용, 현재 상태, 다음 단계를 명확히 기술
- 불필요한 설명은 제외하고 핵심만 간결하게

## 특수 상황별 커밋 메시지

### 버그 수정

```bash
[수정-반복생성-매일-FIX] 매일 반복 종료일 계산 버그 수정

문제: endDate가 startDate보다 이전일 때 무한 루프 발생
해결: 입력 검증 로직 추가 및 에러 처리
테스트: 엣지케이스 단위 테스트 추가
```

### 성능 개선

```bash
[최적화-캘린더뷰-렌더링-PERF] 반복 일정 렌더링 성능 최적화

개선사항:
- 메모이제이션으로 불필요한 재렌더링 방지
- 가상화로 대량 반복 일정 처리
- 지연 로딩으로 초기 렌더링 속도 향상

성능 향상: 1000개 반복 일정 렌더링 시간 2초 → 200ms
```

### 문서화

```bash
[문서-반복기능-API-DOC] 반복 일정 API 문서 업데이트

추가 내용:
- RepeatInfo 타입 스키마 정의
- 각 반복 유형별 예시 코드
- 엣지케이스 처리 방법
- 에러 코드 및 대응 방안
```

## 브랜치별 커밋 전략

### 기능 브랜치 (세밀한 TDD 커밋)

```bash
# feat/반복일정-매일 브랜치에서
매일반복-01-RED: [통합-반복생성-매일-RED] 매일 반복 생성 워크플로우 실패 테스트
매일반복-02-GREEN: [통합-반복생성-매일-GREEN] saveSchedule 반복 지원 기본 구현
매일반복-03-REFACTOR: [통합-반복생성-매일-REFACTOR] RecurrenceEngine 도입
매일반복-04-RED: [단위-반복로직-매일-RED] 날짜 계산 로직 엣지케이스 테스트
매일반복-05-GREEN: [단위-반복로직-매일-GREEN] 엣지케이스 처리 구현
```

### 메인 브랜치 (의미있는 단위로 스쿼시)

```bash
# main 브랜치에 병합 시
feat: 매일 반복 일정 생성 기능 완성

구현 내용:
- 사용자가 매일 반복 유형 선택 가능
- 생성된 반복 일정이 캘린더에 표시
- 이벤트 리스트에 반복 정보 표시
- 날짜 계산 엣지케이스 처리

테스트 커버리지: 95% (통합 테스트 + 단위 테스트)
관련 이슈: #123, #124, #125
```

## 검색 및 필터링을 위한 태그

### Git log 활용 예시

```bash
# TDD 단계별 커밋 조회
git log --oneline --grep="RED"
git log --oneline --grep="GREEN"
git log --oneline --grep="REFACTOR"

# 기능별 커밋 조회
git log --oneline --grep="반복생성"
git log --oneline --grep="반복수정"

# 레벨별 커밋 조회
git log --oneline --grep="통합"
git log --oneline --grep="단위"
git log --oneline --grep="E2E"

# 특정 반복 유형별 조회
git log --oneline --grep="매일"
git log --oneline --grep="매월"
```

## 팀 협업을 위한 컨벤션

### 코드 리뷰 시 참고사항

- **RED 단계**: 테스트 시나리오의 적절성 검토
- **GREEN 단계**: 최소 구현의 타당성 확인
- **REFACTOR 단계**: 코드 품질 및 설계 검토

### PR 제목 형식

```bash
feat: 매일 반복 일정 생성 기능 구현

TDD 커밋 요약:
- [통합-반복생성-매일-RED] → [GREEN] → [REFACTOR]
- [단위-반복로직-매일-RED] → [GREEN] → [REFACTOR]
- [단위-캘린더뷰-UI-RED] → [GREEN] → [REFACTOR]

주요 변경사항:
- RecurrenceEngine 클래스 추가
- saveSchedule 함수 RepeatInfo 지원
- 캘린더 뷰 반복 필터링 로직

테스트 커버리지: 95% (15개 테스트 추가)
```

## 자동화 도구 설정

### Git Hooks (commit-msg)

```bash
#!/bin/sh
# .git/hooks/commit-msg

commit_regex='^(\[통합|단위|E2E\]-\[.*\]-\[.*\]-\[RED|GREEN|REFACTOR|FIX|PERF|DOC\]) .*$'

if ! grep -qE "$commit_regex" "$1"; then
    echo "커밋 메시지가 컨벤션에 맞지 않습니다."
    echo "형식: [레벨-기능-범위-단계] 설명"
    echo "예시: [통합-반복생성-매일-RED] 매일 반복 생성 워크플로우 실패 테스트"
    exit 1
fi
```

### VS Code 스니펫

```json
{
  "TDD RED Commit": {
    "prefix": "commit-red",
    "body": [
      "[${1|통합,단위,E2E|}-${2:기능}-${3:범위}-RED] ${4:설명}",
      "",
      "${5:테스트 시나리오}:",
      "- ${6:구체적인 테스트 내용}",
      "",
      "현재 상태: ${7:실패 원인}",
      "다음 단계: ${8:구현 계획}"
    ],
    "description": "TDD RED 단계 커밋 메시지 템플릿"
  },
  "TDD GREEN Commit": {
    "prefix": "commit-green",
    "body": [
      "[${1|통합,단위,E2E|}-${2:기능}-${3:범위}-GREEN] ${4:설명}",
      "",
      "구현 내용:",
      "- ${5:구현한 기능}",
      "",
      "현재 한계: ${6:하드코딩이나 임시 구현 설명}"
    ],
    "description": "TDD GREEN 단계 커밋 메시지 템플릿"
  }
}
```
